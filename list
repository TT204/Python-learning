#经典例题1 列表中元素改大小写，排序

name=[]
name.append('JOE')
name.append('JACK')
name.append('jane')
name.append('john')
name.append('joanna')

name.insert(0,'Jenny')
name.append('Josephine')

print(name)

titled_name=[]
for n in name:
    titled_name.append(n.title())

print(titled_name)

titled_name.sort()
print(titled_name)


#例题2：列表元素多种排序方法

tourist_site=['Chiangmai','Tokyo','Lhasa','Suzhou','Berlin']

print(tourist_site)

#临时排列呈现不改变列表原始顺序
sorted(tourist_site)  
print(sorted(tourist_site))

sorted(tourist_site,reverse=True)
print(sorted(tourist_site,reverse=True))

print(tourist_site)

#永久倒排/翻转列表元素顺序
tourist_site.reverse()
print(tourist_site)

#再次翻转列表元素顺序,即回到列表原始顺序,永久改变
tourist_site.reverse()
print(tourist_site)

#永久改变列表元素顺序,按字母顺序排序
tourist_site.sort()
print(tourist_site)

#永久改变列表元素顺序,按字母倒序排序
tourist_site.sort(reverse=True)
print(tourist_site)

#统计列表元素个数
len(tourist_site)

#for循环

#循环条件将遍历列表中的每个元素。每个缩进的代码行都是循环的一部分，且将针对列表中的每个值都执行一次。

tourist_site=['Chiangmai','Tokyo','Lhasa','Suzhou','Berlin']

for site in tourist_site:
    message=site.title()+', a beautiful place you will never forget.'
    print(message)
    next_visit='I am expected to visit '+site.title()+' next time.\n'  #\n用于下一行前空出一行
    print(next_visit)

#for循环后，没有缩进的代码只执行一次，而不会重复执行。
print('These are the most amazing places to visit for tourists.')

#函数range() 生成一系列数字，含左不含右

for value in range(1,5):
    print(value)

#生成数字列表，使用list()和range(),并将range()作为list() 的参数。

numbers=list(range(1,6))
print(numbers)

#range()里的参数可以指定步长

even_numbers=list(range(2,15,2))
print(even_numbers)

#例题3：生成1~10的平方组成的数字列表

squares=[]
for n in range(1,11):
    square_n=n**2
    print(square_n)
    squares.append(square_n)

print(squares)

#数列的简单统计

squares=[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]

#求数列中的最小值
min(squares)
print(min(squares))

#求数列中的最大值
max(squares)
print(max(squares))

#求数列的总和
sum(squares)
print(sum(squares))

#求数列的个数
len(squares)
print(len(squares))

#求平均数（总和/个数)
average=sum(squares)/len(squares)
print(average)

#用列表解析非常简明要略地生成数列。
#列表解析，将for循环与创建新元素的代码合并成一行生成列表。

squares=[n**2 for n in range(1,11)]
print(squares)

#列表解析 语法；
#1. 指定一个描述性的列表名。如squares
#2. 指定左方括号，定义一个表达式用于生成存储到列表中的值。如 n**2
#3. 编写一个for循环，用于给表达式提供值，再加上右方括号。如 for n in range(1,11).for循环这里没有：

#例题：通过给函数 range()指定第三个参数来创建一个列表，其中包含 1~20 的奇数；再使用一个 for 循环将这些数字都打印出来。
numbers=[]
for num in range(1,21,2):
    print(num)
    numbers.append(num)
print(numbers)

for num in numbers:
    print(num)

#例题：3 的倍数：创建一个列表，其中包含 3~30 内能被 3 整除的数字；再使用一个 for循环将这个列表中的数字都打印出来。
numbers=[num for num in range(3,31,3)]
for num in numbers:
    print(num)

#例题：立方解析
numbers=[num**3 for num in range(1,11)]
for n in numbers:
    print(n)

#例题：立方
numbers=[]
for num in range(1,11):
    numbers.append(num**3)
for n in numbers:
    print(n)

# 列表的切片
players=['Alice','Judy','Slime','Bobo','Fyer','Yale']
print(players[0:3])
print(players[4:-1])  #切片不包括最后一位队员
print(players[-3:-1]) 
len(players)
print(players[0:6])

#指定切片从第一个元素开始
print(players[:6])

#指定切片到最后一个元素为止
print(players[2:])

#指定切片为最后三位队员
print(players[-3:])

#遍历切片
players=['Alice','Judy','Slime','Bobo','Fyer','Yale']

for player in players[1:4]:
    message=player.title()+', you are on in five minutes!'
    print(message)

print('It is show time for us!')

# 复制列表。方法是创建一个包含列表里所有元素的切片，方法是同时省略起始索引和终止索引，用list_name[:]
my_foods=['cream','coffee','cock tail','hot pot']

Jojo_foods=[]
Jojo_foods=my_foods[:]
print(Jojo_foods)

print('\nMy favorite foods are:')
for food in my_foods:
    print('\t'+food)

print("\nMy friend Jojo's favorite foods are:")
for food in Jojo_foods:
    print('\t'+food)

my_foods=['cream','coffee','cock tail','hot pot']

Jojo_foods=my_foods[:]

my_foods.append('toast')
Jojo_foods.append('Juice')

print(my_foods)
print(Jojo_foods)

my_foods=['cream','coffee','cock tail','hot pot']

Jojo_foods=my_foods
#上述代码将使两个列表变成同一个列表。而不是复制一份副本作为第二个列表。

my_foods.append('toast')
Jojo_foods.append('Juice')
#此后两处修改都对同一个列表生效

print(my_foods)
print(Jojo_foods)
#两个列表的打印完全一样


# 元组：元组储存一系列不可修改的元素。元组是不可变的列表。元组的值是不能修改的。元组用()标识。tuple_name()

#修改元组变量虽然不能修改元组的元素，但可以给存储元组的变量赋值。可重新定义整个元组。

dimensions=(200,50) #存储矩形的长宽
print('Original dimensions:')
for dimension in dimensions:
    print(dimension)

dimensions=(400,100) #给存储元组的变量重新赋值
print('\nModified dimensions:')
for dimension in dimensions:
    print(dimension)

#相比列表，元组是更简单的数据结构。如果需要存储的一组值在程序的整个生命周期内都不可变，用元组。

#例题：自助餐厅的食品存储进元组
buffet=('cream cake','coffee','steak','wine','paella')

print('\nThe list of buffet cuisines is:')
for food in buffet:
    print(food)

#buffet[0]='bread'  #error:元组的元素不可修改

buffet=('kunafa','coffee','steak','wine','tiramisu')
print('\nThe updated cuisine list for buffet is:')

for food in buffet:
    print(food)


# if语句.if语句的核心是一个判断True or False的表达式，被称为条件测试。True就执行if条件下的代码，False就忽略这段代码。
# 条件测试是一个判断True or False的表达式。条件测试的输出结果为True or False。
# == 条件测试，是否等于。
cars=['audi','bmw','subaru','toyota']

for car in cars:
    if car=='bmw':
        print(car.upper())
    else:
        print(car.title())

car='bmw'
car=='bmw'
car=='audi'

car='audi'
car.title()=='Audi'
car  #条件测试没有改变存储在变量里的值


# ！= 条件测试 是否不等于
requested_topping='mushrooms'

if requested_topping!='anchovies':
    print('Hold the anchovies')

if requested_topping=='mushrooms':
    print('Put the mushrooms')


# 布尔表达式，boolean,条件测试的别名，结果为True or False.

car='subaru'
print("Is car =='subaru'? I predict True.") #打印字符串
print(car=='subaru') #打印布尔表达式的结果

print("\nIs car == 'audi'? I predict false.")
print(car=='audi')


#例题：如何将一个列表关联到另一个元组的元素，并间接修改元组

coffee_menu=['americano','latte','Irish coffee','Café au lait','Coffee Whipped Cream']
buffet=('cream cake',coffee_menu,'steak','wine','paella')
print(buffet)

coffee_menu.append('Espresso')
print(buffet)



answer=17

if answer !=42:
    print('That is not the correct answer! Pls try again.')


#条件测试 > == < >= <= !=
age=18
age>19
age<43
age!=35
age==36
age>=8
age<=9


# 多个条件测试 and/or
age_0=12
age_1=18
age_0>14 and age_1>=29

age_0>=8 and age_1>=17

age_0>=8 or age_1>=28

(age_0>=80) or (age_1>=80)


# 条件测试 in
requested_toppings=['mushrooms','onions','pineapple']
'mushrooms' in requested_toppings
'bacon' in requested_toppings


# not in 检查是否不包含

banned_users=['andrew','david','caroline']
user='maria'

if user not in banned_users:
    print(user.title()+', you can post a response as you wish.')


#例题：检查用户是否banned，并发送不同提示信息
banned_users=['andrew','david','caroline']

if user in banned_users:
    print('Sorry '+user.title()+', your account has been locked because of violating community rules.')
if user not in banned_users:
    print(user.title()+', you can post a response as you wish.')

user='marie'
user='caroline'

