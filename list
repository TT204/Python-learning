#经典例题1 列表中元素改大小写，排序

name=[]
name.append('JOE')
name.append('JACK')
name.append('jane')
name.append('john')
name.append('joanna')

name.insert(0,'Jenny')
name.append('Josephine')

print(name)

titled_name=[]
for n in name:
    titled_name.append(n.title())

print(titled_name)

titled_name.sort()
print(titled_name)


#例题2：列表元素多种排序方法

tourist_site=['Chiangmai','Tokyo','Lhasa','Suzhou','Berlin']

print(tourist_site)

#临时排列呈现不改变列表原始顺序
sorted(tourist_site)  
print(sorted(tourist_site))

sorted(tourist_site,reverse=True)
print(sorted(tourist_site,reverse=True))

print(tourist_site)

#永久倒排/翻转列表元素顺序
tourist_site.reverse()
print(tourist_site)

#再次翻转列表元素顺序,即回到列表原始顺序,永久改变
tourist_site.reverse()
print(tourist_site)

#永久改变列表元素顺序,按字母顺序排序
tourist_site.sort()
print(tourist_site)

#永久改变列表元素顺序,按字母倒序排序
tourist_site.sort(reverse=True)
print(tourist_site)

#统计列表元素个数
len(tourist_site)

#for循环

#循环条件将遍历列表中的每个元素。每个缩进的代码行都是循环的一部分，且将针对列表中的每个值都执行一次。

tourist_site=['Chiangmai','Tokyo','Lhasa','Suzhou','Berlin']

for site in tourist_site:
    message=site.title()+', a beautiful place you will never forget.'
    print(message)
    next_visit='I am expected to visit '+site.title()+' next time.\n'  #\n用于下一行前空出一行
    print(next_visit)

#for循环后，没有缩进的代码只执行一次，而不会重复执行。
print('These are the most amazing places to visit for tourists.')

#函数range() 生成一系列数字，含左不含右

for value in range(1,5):
    print(value)

#生成数字列表，使用list()和range(),并将range()作为list() 的参数。

numbers=list(range(1,6))
print(numbers)

#range()里的参数可以指定步长

even_numbers=list(range(2,15,2))
print(even_numbers)

#例题3：生成1~10的平方组成的数字列表

squares=[]
for n in range(1,11):
    square_n=n**2
    print(square_n)
    squares.append(square_n)

print(squares)

#数列的简单统计

squares=[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]

#求数列中的最小值
min(squares)
print(min(squares))

#求数列中的最大值
max(squares)
print(max(squares))

#求数列的总和
sum(squares)
print(sum(squares))

#求数列的个数
len(squares)
print(len(squares))

#求平均数（总和/个数)
average=sum(squares)/len(squares)
print(average)

#用列表解析非常简明要略地生成数列。
#列表解析，将for循环与创建新元素的代码合并成一行生成列表。

squares=[n**2 for n in range(1,11)]
print(squares)

#列表解析 语法；
#1. 指定一个描述性的列表名。如squares
#2. 指定左方括号，定义一个表达式用于生成存储到列表中的值。如 n**2
#3. 编写一个for循环，用于给表达式提供值，再加上右方括号。如 for n in range(1,11).for循环这里没有：

#例题：通过给函数 range()指定第三个参数来创建一个列表，其中包含 1~20 的奇数；再使用一个 for 循环将这些数字都打印出来。
numbers=[]
for num in range(1,21,2):
    print(num)
    numbers.append(num)
print(numbers)

for num in numbers:
    print(num)

#例题：3 的倍数：创建一个列表，其中包含 3~30 内能被 3 整除的数字；再使用一个 for循环将这个列表中的数字都打印出来。
numbers=[num for num in range(3,31,3)]
for num in numbers:
    print(num)

#例题：立方解析
numbers=[num**3 for num in range(1,11)]
for n in numbers:
    print(n)

#例题：立方
numbers=[]
for num in range(1,11):
    numbers.append(num**3)
for n in numbers:
    print(n)

# 列表的切片
players=['Alice','Judy','Slime','Bobo','Fyer','Yale']
print(players[0:3])
print(players[4:-1])  #切片不包括最后一位队员
print(players[-3:-1]) 
len(players)
print(players[0:6])

#指定切片从第一个元素开始
print(players[:6])

#指定切片到最后一个元素为止
print(players[2:])

#指定切片为最后三位队员
print(players[-3:])

#遍历切片
players=['Alice','Judy','Slime','Bobo','Fyer','Yale']

for player in players[1:4]:
    message=player.title()+', you are on in five minutes!'
    print(message)

print('It is show time for us!')

# 复制列表。方法是创建一个包含列表里所有元素的切片，方法是同时省略起始索引和终止索引，用list_name[:]
my_foods=['cream','coffee','cock tail','hot pot']

Jojo_foods=[]
Jojo_foods=my_foods[:]
print(Jojo_foods)

print('\nMy favorite foods are:')
for food in my_foods:
    print('\t'+food)

print("\nMy friend Jojo's favorite foods are:")
for food in Jojo_foods:
    print('\t'+food)

my_foods=['cream','coffee','cock tail','hot pot']

Jojo_foods=my_foods[:]

my_foods.append('toast')
Jojo_foods.append('Juice')

print(my_foods)
print(Jojo_foods)

my_foods=['cream','coffee','cock tail','hot pot']

Jojo_foods=my_foods
#上述代码将使两个列表变成同一个列表。而不是复制一份副本作为第二个列表。

my_foods.append('toast')
Jojo_foods.append('Juice')
#此后两处修改都对同一个列表生效

print(my_foods)
print(Jojo_foods)
#两个列表的打印完全一样


# 元组：元组储存一系列不可修改的元素。元组是不可变的列表。元组的值是不能修改的。元组用()标识。tuple_name()

#修改元组变量虽然不能修改元组的元素，但可以给存储元组的变量赋值。可重新定义整个元组。

dimensions=(200,50) #存储矩形的长宽
print('Original dimensions:')
for dimension in dimensions:
    print(dimension)

dimensions=(400,100) #给存储元组的变量重新赋值
print('\nModified dimensions:')
for dimension in dimensions:
    print(dimension)

#相比列表，元组是更简单的数据结构。如果需要存储的一组值在程序的整个生命周期内都不可变，用元组。

#例题：自助餐厅的食品存储进元组
buffet=('cream cake','coffee','steak','wine','paella')

print('\nThe list of buffet cuisines is:')
for food in buffet:
    print(food)

#buffet[0]='bread'  #error:元组的元素不可修改

buffet=('kunafa','coffee','steak','wine','tiramisu')
print('\nThe updated cuisine list for buffet is:')

for food in buffet:
    print(food)


# if语句.if语句的核心是一个判断True or False的表达式，被称为条件测试。True就执行if条件下的代码，False就忽略这段代码。
# 条件测试是一个判断True or False的表达式。条件测试的输出结果为True or False。
# == 条件测试，是否等于。
cars=['audi','bmw','subaru','toyota']

for car in cars:
    if car=='bmw':
        print(car.upper())
    else:
        print(car.title())

car='bmw'
car=='bmw'
car=='audi'

car='audi'
car.title()=='Audi'
car  #条件测试没有改变存储在变量里的值


# ！= 条件测试 是否不等于
requested_topping='mushrooms'

if requested_topping!='anchovies':
    print('Hold the anchovies')

if requested_topping=='mushrooms':
    print('Put the mushrooms')


# 布尔表达式，boolean,条件测试的别名，结果为True or False.

car='subaru'
print("Is car =='subaru'? I predict True.") #打印字符串
print(car=='subaru') #打印布尔表达式的结果

print("\nIs car == 'audi'? I predict false.")
print(car=='audi')


#例题：如何将一个列表关联到另一个元组的元素，并间接修改元组

coffee_menu=['americano','latte','Irish coffee','Café au lait','Coffee Whipped Cream']
buffet=('cream cake',coffee_menu,'steak','wine','paella')
print(buffet)

coffee_menu.append('Espresso')
print(buffet)



answer=17

if answer !=42:
    print('That is not the correct answer! Pls try again.')


#条件测试 > == < >= <= !=
age=18
age>19
age<43
age!=35
age==36
age>=8
age<=9


# 多个条件测试 and/or
age_0=12
age_1=18
age_0>14 and age_1>=29

age_0>=8 and age_1>=17

age_0>=8 or age_1>=28

(age_0>=80) or (age_1>=80)


# 条件测试 in
requested_toppings=['mushrooms','onions','pineapple']
'mushrooms' in requested_toppings
'bacon' in requested_toppings


# not in 检查是否不包含

banned_users=['andrew','david','caroline']
user='maria'

if user not in banned_users:
    print(user.title()+', you can post a response as you wish.')


#例题：检查用户是否banned，并发送不同提示信息
banned_users=['andrew','david','caroline']

if user in banned_users:
    print('Sorry '+user.title()+', your account has been locked because of violating community rules.')
if user not in banned_users:
    print(user.title()+', you can post a response as you wish.')

user='marie'
user='caroline'


# 布尔表达式，boolean,条件测试的别名，结果为True or False.

car='subaru'
print("Is car =='subaru'? I predict True.") #打印字符串
print(car=='subaru') #打印布尔表达式的结果

print("\nIs car == 'audi'? I predict false.")
print(car=='audi')


#例题：如何将一个列表关联到另一个元组的元素，并间接修改元组

coffee_menu=['americano','latte','Irish coffee','Café au lait','Coffee Whipped Cream']
buffet=('cream cake',coffee_menu,'steak','wine','paella')
print(buffet)

coffee_menu.append('Espresso')
print(buffet)


# IF语句语法：
#if conditional test:
#    do something

# if-else 结构，检查非此即彼的情形。
# if-elif-else 结构，检查超过两种情况的情形，多选一测试。

age=12

if age<4:
    print('Your admission cost is $0.')
elif age<18:  #第2个if测试，仅在第一个测试未通过时才执行。所以此时年龄>=4.
    print('Your admission cost is $5.')
else:
    print('Your admission cost is $10.')

#以下代码更简洁

age=12

if age<4:
    price=0
elif age<18:
    price=5
else:
    price=10

print('Your admission cost is $'+str(price)+'.')


#多个elif条件
age=60

if age<4:
    price=0
elif age<18:
    price=5
elif age<65:
    price=10
else:
    price=5

print('Your admission cost is $'+str(price)+'.')


#elif 替代else
age=80

if age<4:
    price=0
elif age<18:
    price=5
elif age<65:
    price=10
elif age>=65:
    price=5

print('Your admission cost is $'+str(price)+'.')


#多个if条件测试,多个独立条件测试。无论第一个条件是否满足，都要推进后面的条件测试。
#如果你只想执行一个代码块，就使用if-elif-else结构；如果要运行多个代码块，就使用一系列独立的if语句。

requested_toppings=['mushrooms','extra cheese']

if 'mushrooms' in requested_toppings:
    print('Adding mushrooms.')
if 'pepperoni' in requested_toppings:
    print('Adding pepperoni.')
if 'extra cheese' in requested_toppings:
    print('Adding extra cheese.')

print('\nFinished making your pizza.')


#例题：外星人的颜色，判断是否为绿色，是则执行代码，如果不，不执行。
alien_color in ['green','yellow','red']
if alien_color=='green':
    print('The player gained 5 points.')

alien_color='green'
alien_color='red'


#上述例题不能通过for循环实现。

alien_colors=['green','yellow','red']

for alien_color in alien_colors: # for循环，作用是遍历一遍列表,一定会找到符合green的元素
    if alien_color=='green':
        print('The player gained 5 points.')

alien_color='red'


alien_color in ['green','yellow','red']
if alien_color=='green':
    print('The player gained 5 points.')
elif alien_color=='yellow':
    print('The player gained 10 points.')
else:
    print('The player gained 15 points.')

alien_color='green'
alien_color='red'
alien_color='yellow'


#检查年龄
age=

if age<2:
    print('He or She is an infant.')
elif age<4:
    print('He or She is learning for walk.')
elif age<13:
    print('He or She is a child.')
elif age<20:
    print('He or She is a teenager.')
elif age<65:
    print('He or She is an adult.')
elif age>=65:
    print('He or She is an elderly person.')


#例题：检查是否是你喜欢的水果
favorite_fruits=['watermelon','mango','banana','lemon']

if 'apple' in favorite_fruits:
    fruit='apple'
    print('You really like '+fruit.lower()+'.')
if 'watermelon' in favorite_fruits:
    fruit='watermelon'
    print('You really like '+fruit.lower()+'.')
if 'mango' in favorite_fruits:
    fruit='mango'
    print('You really like '+fruit.lower()+'.')
if 'passion fruit' in favorite_fruits:
    fruit='passion fruit'
    print('You really like '+fruit.lower()+'.')
if 'lemon' in favorite_fruits:
    fruit='lemon'
    print('You really like '+fruit.lower()+'.')


#例题：在制作pizza时，打印配料，并检查配料是否有货。
requested_toppings=['mushrooms','green peppers','extra cheese']

for requested_topping in requested_toppings:
    if requested_topping == 'green peppers':
        print('Sorry, we are out of green peppers right now.')
    else:
        print('Adding '+requested_topping+'.')

print('\nFinished making your pizza!')


#判断列表是否为空,在if语句中将列表名用在条件表达式里时，python将在列表中至少有一个元素时返回True,在列表为空时返回False.

requested_toppings=[]

if requested_toppings:
    for requested_topping in requested_toppings:
        print('Adding '+requested_topping+'.')
    print('\nFinished making your pizza!')
else:
    print('Are you sure you want a plain pizza?')


#判断列表是否为空,不为空则执行打印添加配料

requested_toppings=['extra cheese','bacon','beef']

if requested_toppings:
    for requested_topping in requested_toppings:
        print('Adding '+requested_topping+'.')
    print('\nFinished making your pizza!')
else:
    print('Are you sure you want a plain pizza?')


#判断列表是否为空，另一种方法：看len(list_name)是否为0.

requested_toppings=[]

if len(requested_toppings)==0:
    print('You request a plain pizza.')
elif len(requested_toppings)>0:
    for requested_topping in requested_toppings:
        print('Adding '+requested_topping+'.')
    print('Your pizza has been finished!')


#检查len(list_name)是否为0
requested_toppings=['extra cheese','bacon','beef']

if len(requested_toppings)==0:
    print('You request a plain pizza.')
elif len(requested_toppings)>0:
    for requested_topping in requested_toppings:
        print('Adding '+requested_topping+'.')
    print('Your pizza has been finished!')
    

#例题：检查用户点单pizza时，下单的配料是否在本店可以提供的配料清单里，如果是，添加配料，如果不是，拒绝添加。

#如果本店的配料清单是固定不变的，available_toppings列表可以改为元组。
available_toppings=['mushrooms','olives',
                    'green peppers','pepperoni',
                    'pineapple','extra cheese']

requested_toppings=['mushrooms','french fries','extra cheese']

for requested_topping in requested_toppings:
    if requested_topping in available_toppings:
        print('Adding '+requested_topping+' into pizza.')
    else:
        print('Sorry, we do not have '+requested_topping+'.')
print('Your pizza has been finished!')


#例题：网站用户登录问候，以特殊方式向admin打招呼
user_names=['Judy','admin','Teresa','Jasmine','Joker']

if user=='admin':
    print('Hello '+user+', would you like to see a status report?')
else:
    print('Hello '+user+', thank you for logging in again.')

user='admin'
user='Joker'


#例题：接上题，网站用户登录问候，处理没有用户的情形。检查列表是否为空 方法一
user_names=['Judy','admin','Teresa','Jasmine','Joker']
del user_names[:]

if user_names:  #检查列表是否为空
    if user=='admin':
        print('Hello '+user+', would you like to see a status report?')
    else:
        print('Hello '+user+', thank you for logging in again.')
else:
    print('We need to find some users!')


#检查列表是否为空 方法二

user_names=['Judy','admin','Teresa','Jasmine','Joker']
del user_names[:]

if len(user_names)==0: 
    print('We need to find some users!')
if len(user_names)>0:
    if user=='admin':
        print('Hello '+user+', would you like to see a status report?')
    else:
        print('Hello '+user+', thank you for logging in again.')
    

#例题：接上题，编写一个程序，模拟网站确保每位用户的用户名都是独一无二的。

current_users=['Judy','Jimmy','Teresa','Jasmine','Joker']

#将用户名库里的用户名全部统一为首字母大写的格式，方便后续比对。
titled_current_users=[]
for current_user in current_users:
    titled_current_users.append(current_user.title()) 
    
new_users=['Jasmine','Cola','Starbucks','Joker','Whoo','JIMMY']

#将新用户名的首字母大写格式，与用户名库里的首字母大写格式相比对，重名的不录入。
for new_user in new_users:
    if new_user.title() in titled_current_users:
        print('The user name ['+new_user+'] has been used. Please provide another user name.')
    if new_user.title() not in titled_current_users:
        print('The user name ['+new_user+'] is available.')


#例题：打印序数，使用if-elif-else结构
#生成包含数字 1~9的列表
numbers=[num for num in range(1,10)]
print(numbers)

#遍历该列表
for num in numbers:  
    if num==1:
        print('\t'+str(num)+'st')
    elif num==2:
        print('\t'+str(num)+'nd')
    elif num==3:
        print('\t'+str(num)+'rd')
    else:
        print('\t'+str(num)+'th')
    

#字典，是一系列键-值对。可以用键来访问对应的值。字典可储存的信息量不受限制
#值可以是任何对象，包括列表、字典。
#语法：dictionary_name={key0:value0,key1:value1}
# 访问值：print(dictionary_name[key])

alien_0={'color':'green','point':5}
print(alien_0['color'])
print(alien_0['point'])


#添加键-值对
#字典里键-值对的排列顺序不重要，键-值得一一对应关系重要。

alien_0={'color':'green','point':5}
alien_0['x_position']=0
alien_0['y_positon']=25
print(alien_0)


#创建空字典，再往里添加键-值对

alien_0={}
alien_0['color']='green'
alien_0['points']=5
alien_0['x_position']=0
alien_0['y_position']=25
print(alien_0)


#修改字典中的值

alien_0={'color':'green','point':5}
print('The alien is '+alien_0['color']+'.')

alien_0['color']='yellow'
print('The alien is now '+alien_0['color']+'.')


#例题：通过修改字典中的值，对一个能够以不同速度移动的外星人的位置进行跟踪。

alien_0={'x_position':0,'y_position':25,'speed':'medium'}
print('Original x_position: '+str(alien_0['x_position']))


if alien_0['speed']=='slow':
    x_increment=1
elif alien_0['speed']=='medium':
    x_increment=2
else:
    x_increment=3

#新位置等于老位置加上增量
alien_0['x_position']=alien_0['x_position']+x_increment
print('New x_positon: '+str(alien_0['x_position']))


#删除字典里的键-值对,是永久删除

alien_0={'x_position':0,'y_position':25,'speed':'medium'}
del alien_0['speed']
print(alien_0)


#由多个类似对象组成的字典

favorite_languages={'jen':'python','sarah':'c',
                   'edward':'ruby','phil':'javascript'}
print("Sarah's favorite language is "+
      favorite_languages['sarah'].title()+'.')


#例题：用字典存储个人信息并打印

jasmine_info={'surname':'garment','first name':'jasmine','age':33,'city':'los angeles'}
print('Surname: '+jasmine_info['surname'].title())
print('First name: '+jasmine_info['first name'].title())
print('Age: '+str(jasmine_info['age']))
print('City: '+jasmine_info['city'].title())


